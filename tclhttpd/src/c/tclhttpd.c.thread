/*
 * Copyright (c) 2006 Jose F. Nieves <nieves@ltp.upr.clu.edu>
 *
 * See LICENSE
 *
 * $Id$
 */
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "err.h"
#include "libtclconf/tclcreate.h"
#include "tclhttpd.h"

static int set_tclhttpd_script(struct tclhttpd_st *hp, char *script);
static int tclhttpd_create_thread(struct tclhttpd_st *hp);

struct tclhttpd_st *tclhttpd_open(char *script){

  struct tclhttpd_st *hp;
  int status = 0;

  assert(script != NULL);

  hp = malloc(sizeof(struct tclhttpd_st));
  if(hp == NULL)
    return(NULL);

  hp->script = NULL;
  hp->f_quit = 0;
  hp->thread_status = -1;
  /* hp->thread_id; */

  if(set_tclhttpd_script(hp, script) != 0){
    free(hp);
    return(NULL);
  }

  hp->interp = tcl_create_interp();
  if(hp->interp == NULL)
    status = -1;

  if(status == 0)
    Tcl_LinkVar(hp->interp, "Nbsp(quit)", (void*)&hp->f_quit, TCL_LINK_INT);

  if(status == 0)
    status = tclhttpd_create_thread(hp);

  if(status != 0){
    tclhttpd_close(hp);
    hp = NULL;
  }

  return(hp);
}

void tclhttpd_close(struct tclhttpd_st *hp){

  assert(hp != NULL);

  /*
   * This is the signal to the tclhttpd server script to quit.
   */
  hp->f_quit = 1;

  if(hp->thread_status == 0){
    pthread_join(hp->thread_id, NULL);
    log_info("Finished http server.");
  }

  if(hp->interp != NULL)
    tcl_delete_interp(hp->interp);

  if(hp->script != NULL)
    free(hp->script);

  free(hp);
}

static int set_tclhttpd_script(struct tclhttpd_st *hp, char *script){

  int status = 0;
  char *s;
  int length;

  assert((script != NULL) && (script[0] != '\0'));

  length = strlen(script);
  s = malloc(length + 1);
  if(s == NULL)
    return(-1);

  if(hp->script != NULL)
    free(hp->script);
  
  hp->script = s;
  strncpy(hp->script, script, length + 1);

  return(status);
}

static int exec_tclhttpd(struct tclhttpd_st *hp){

  int status = 0;

  status = Tcl_EvalFile(hp->interp, hp->script);
  if(status != TCL_OK){
    status = 1;
    log_errx("Error executing %s:\n%s", hp->script,
	     Tcl_GetStringResult(hp->interp));
  }

  return(status);
}

static int tclhttpd_create_thread(struct tclhttpd_st *hp){

  int status = 0;
  pthread_t thrid;
  pthread_attr_t attr;

  status = pthread_attr_init(&attr);

  /*
  if(status == 0)
    status = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
  */

  if(status == 0)
    status = pthread_create(&thrid, &attr, (void*)exec_tclhttpd, hp);

  if(status == 0){
    hp->thread_status = 0;
    hp->thread_id = thrid;
  }else{
    errno = status;
    status = -1;
  }

  return(status);
}
