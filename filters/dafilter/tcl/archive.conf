#
# $Id$
#

# Common section
## set archive(conf)    [file join $common(confdir) "archive.conf"];
## set archive(datadir) $common(archivedatadir);
## set archive(invdir)  $common(archiveinvdir);

# Per-filter parameters for the archiver
#
# The archiver is disabled by default. If it is enabled by setting the
# variable archive(<filter>,enable) to 1, then the other specific
# variables can be used to select what is or not archived.
#
# A non-zero setting of "<type>_enable" enables the archive for <type>.
# If the setting is 1, than a copy of all the data is saved
# permamently (it is not "pruned" by the hourly cleanup script) in the
# archive directory. A setting of 2 also enables the archive
# but it disables the usual mode of saving the data. The <type>_regex
# variables can be used to select/omit the files of a given <type> that
# archived.

#
# dafilter
#
## set archive(da,datadir) [file join $archive(datadir) "digatmos"];
## set archive(da,subdirfmt) "%Y%m%d";
## set archive(da,file_namefext) ".tar";
## set archive(da,sat_namefmt) {$rc(wmoid)_${ymd_hm}.gini.tar};
## set archive(da,sat_dirfmt) {$rc(wmoid)};
## set archive(da,rad_namefmt) {${ymdh}.nids.tar};
## set archive(da,rad_dirfmt) {$rc(awips2)};
## set archive(da,invdir) [file join $archive(invdir) "digatmos"];
## set archive(da,inv_subdirfmt) "%Y%m%d";
## set archive(da,inv_namefmt) "%H%M.inv";

## set archive(da,enable) 0;
## set archive(da,file_enable) 1;
## set archive(da,sat_enable) 1;
## set archive(da,rad_enable) 1;
## set archive(da,file_regex) {.*};
## set archive(da,sat_regex) {.*};
## set archive(da,rad_regex) {.*};

# exec tar in the background
## set archive(da,asyncmode) 1;

#
# Read the local overrides
#
set _confname "archive.conf"

if {[info exists source_archive_conf_defined]} {
    return;
}
set source_archive_conf_defined 1;

foreach _d $common(localconfdirs) {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset _d;
unset _confname;
unset _localconfname;
