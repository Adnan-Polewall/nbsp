#
# $Id$
#

### set gisfilter(localconfdirs)  $common(localconfdirs);
### set gisfilter(datadir) [file join $common(datadir) "gis"];
#
# wct rc files
#
### set gisfilter(wct_rcdirs) $gisfilter(localconfdirs);
### set gisfilter(wct_rcsubdir) [file join "gis" "wct"];
#
# Parameters for the inventory database (for the cleanup script)
### set gisfilter(invdir) [file join $common(datainvdir) "gis"];
### set gisfilter(invformat) $common(datainvformat); # format forhourly subdirs
### set gisfilter(radinvsubdir) "nexrad";
### set gisfilter(satinvsubdir) "sat";
### set gisfilter(rad_inv_enable) 1;
### set gisfilter(sat_inv_enable) 1;

#
# sat configuration
#
### set gisfilter(sat_enable) 1;  # whether to generate the tif files
### set gisfilter(sat_regex)  {_tig(e|w|p|q)0(1|4|5)};   # fname
### set gisfilter(sat_latest_enable)        1; # make link to latest
### set gisfilter(sat_latestname)   "latest";
### set gisfilter(sat_namefmt) {$rc(wmoid)_$rc(ymd_hm)}; # without the ext
### set gisfilter(sat_subdirfmt) {[string range $rc(wmoid) 0 2]/$rc(wmoid)};
#
### set gisfilter(sat_outputfile_namefmt,gini) "$gisfilter(sat_namefmt).gini";
### set gisfilter(sat_outputfile_dirfmt,gini) \
###	"sat/gini/$gisfilter(sat_subdirfmt)";
#
### set gisfilter(sat_outputfile_namefmt,tif) "$gisfilter(sat_namefmt).tif";
### set gisfilter(sat_outputfile_dirfmt,tif) \
###	"sat/tif/$gisfilter(sat_subdirfmt)";
#
### set gisfilter(sat_outputfile_namefmt,nc) "$gisfilter(sat_namefmt).nc";
### set gisfilter(sat_outputfile_dirfmt,nc) \
###	"sat/netcdf/$gisfilter(sat_subdirfmt)";
#
### set gisfilter(sat_bundlelist) [list "sat_conus_tif" "sat_conus_netcdf"];
#
### set gisfilter(sat_bundle,sat_conus_tif,outputfile_fmt) "tif";
### set gisfilter(sat_bundle,sat_conus_tif,wctrc_name) "wct_sat_conus.xml";
### set gisfilter(sat_bundle,sat_conus_tif,regex) {_tig(e|w)};  # fname
### set gisfilter(sat_bundle,sat_conus_tif,wctrc_file) ""; # dynamic if unset
#
### set gisfilter(sat_bundle,sat_conus_netcdf,outputfile_fmt) "nc";
### set gisfilter(sat_bundle,sat_conus_netcdf,wctrc_name) "wct_sat_conus.xml";
### set gisfilter(sat_bundle,sat_conus_netcdf,regex) {_tig(e|w)};  # fname
### set gisfilter(sat_bundle,sat_conus_netcdf,wctrc_file) "";

#
# rad configuration
#
### set gisfilter(rad_enable) 0;
### set gisfilter(rad_regex)  {.*};  # matches against fname
### set gisfilter(rad_latest_enable)        1; # make link to latest
### set gisfilter(rad_latestname)   "latest";
### set gisfilter(rad_namefmt)      {$rc(awips)_$rc(ymd_hm)}; # without ext
### set gisfilter(rad_subdirfmt)    {$rc(awips2)/$rc(awips1)}; 
#
### set gisfilter(rad_outputfile_namefmt,nids) "$gisfilter(rad_namefmt).nids";
### set gisfilter(rad_outputfile_dirfmt,nids) \
###	"rad/nids/$gisfilter(rad_subdirfmt)";
#
### set gisfilter(rad_outputfile_namefmt,tif) "$gisfilter(rad_namefmt).tif";
### set gisfilter(rad_outputfile_dirfmt,tif) \
###	"rad/tif/$gisfilter(rad_subdirfmt)";
#
### set gisfilter(rad_outputfile_namefmt,netcdf) "$gisfilter(rad_namefmt).nc";
### set gisfilter(rad_outputfile_dirfmt,netcdf) \
###	"rad/netcdf/$gisfilter(rad_subdirfmt)";
#
### set gisfilter(rad_bundlelist) [list];

#
# rad2
#
### set gisfilter(rad2_enable) 0;
### set gisfilter(rad2_regex)  {.*};  # matches against fname
### set gisfilter(rad2_latest_enable)        1; # make link to latest
### set gisfilter(rad2_latestname)   "latest";
### set gisfilter(rad2_namefmt)      {$rc(STATION)_${ymd_hm}};
### set gisfilter(rad2_subdirfmt)    {$rc(STATION)};
### set gisfilter(rad2_outputfile_namefmt,nids) $gisfilter(rad2_namefmt);
### set gisfilter(rad2_outputfile_dirfmt,nids) \
###	"rad2/nids/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,tif) "$gisfilter(rad2_namefmt).tif";
### set gisfilter(rad2_outputfile_dirfmt,tif) \
###	"rad2/tif/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_outputfile_namefmt,netcdf) \
###	"$gisfilter(rad2_namefmt).nc";
### set gisfilter(rad2_outputfile_dirfmt,netcdf) \
###	"rad2/netcdf/$gisfilter(rad2_subdirfmt)";
#
### set gisfilter(rad2_bundlelist) [list];

#
# Read the local overrides
#
set _confname "gisfilter.conf";

if {[info exists source_gisfilter_conf_defined]} {
    return;
}
set source_gisfilter_conf_defined 1;

foreach _d $common(localconfdirs) {
    set _localconfname ${_d}/${_confname}
    if {[file exists ${_localconfname}] == 1} {
        source ${_localconfname};
    }
}
unset _d;
unset _confname;
unset _localconfname;
