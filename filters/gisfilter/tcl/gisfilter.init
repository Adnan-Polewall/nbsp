#
# $Id$
#

#
# This file is read by (some of) the command-line tools also.
#

# default configuration file
set gisfilter(conf) [file join $common(confdir) "gisfilter.conf"];
set gisfilter(localconfdirs)  $common(localconfdirs);
set gisfilter(datadir) [file join $common(datadir) "gis"];
set gisfilter(bundle_conf) [file join $common(confdir) \
	"gisfilter-bundle.conf"];
#
# wct rc files location and options
#
set gisfilter(wct_rcdirs) $gisfilter(localconfdirs);
set gisfilter(wct_rcsubdir) [file join "gis" "wct"];
set gisfilter(wct_debug) 0;
#
# Parameters for the inventory database (for the cleanup script)
#
set gisfilter(invdir) [file join $common(datainvdir) "gis"];
set gisfilter(invformat) $common(datainvformat);  # format for hourly subdirs
set gisfilter(radinvsubdir) "nexrad";
set gisfilter(satinvsubdir) "sat";
set gisfilter(rad_inv_enable) 1;
set gisfilter(sat_inv_enable) 1;

#
# sat configuration
#
set gisfilter(sat_enable) 1;  # whether to generate the tif files
set gisfilter(sat_regex)  {_tig(e|w|p|q)0(1|4|5)};   # fname
set gisfilter(sat_latest_enable)        1; # make link to latest
set gisfilter(sat_latestname)   "latest";
set gisfilter(sat_namefmt) {$rc(wmoid)_$rc(ymd_hm)}; # without the extension
set gisfilter(sat_subdirfmt) {[string range $rc(wmoid) 0 2]/$rc(wmoid)};
#
set gisfilter(sat_outputfile_namefmt,gini) "$gisfilter(sat_namefmt).gini";
set gisfilter(sat_outputfile_dirfmt,gini) "sat/gini/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,tif) "$gisfilter(sat_namefmt).tif";
set gisfilter(sat_outputfile_dirfmt,tif) "sat/tif/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,nc) "$gisfilter(sat_namefmt).nc";
set gisfilter(sat_outputfile_dirfmt,nc) "sat/nc/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,asc) "$gisfilter(sat_namefmt).asc";
set gisfilter(sat_outputfile_dirfmt,asc) "sat/asc/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,tif32) "$gisfilter(sat_namefmt).tif";
set gisfilter(sat_outputfile_dirfmt,tif32) \
	"sat/tif32/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,rnc) "$gisfilter(sat_namefmt).rnc";
set gisfilter(sat_outputfile_dirfmt,rnc) "sat/rnc/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,csv) "$gisfilter(sat_namefmt).csv";
set gisfilter(sat_outputfile_dirfmt,csv) "sat/csv/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,shp) "$gisfilter(sat_namefmt).shp";
set gisfilter(sat_outputfile_dirfmt,shp) "sat/shp/$gisfilter(sat_subdirfmt)";
#
set gisfilter(sat_outputfile_namefmt,wkt) "$gisfilter(sat_namefmt).wkt";
set gisfilter(sat_outputfile_dirfmt,wkt) "sat/wkt/$gisfilter(sat_subdirfmt)";
#
##############################################################################
#
# Here would go the bundle configurations, for example
#
### set gisfilter(sat_bundlelist) [list "sat_conus_tif" "sat_conus_netcdf"];
#
### set gisfilter(sat_bundle,sat_conus_tif,outputfile_fmt) "tif";
### set gisfilter(sat_bundle,sat_conus_tif,wctrc_name) "wct_sat_conus.xml";
### set gisfilter(sat_bundle,sat_conus_tif,regex) {_tig(e|w)};
### set gisfilter(sat_bundle,sat_conus_tif,wctrc_file) ""; # dynamic if unset
#
### set gisfilter(sat_bundle,sat_conus_netcdf,outputfile_fmt) "nc";
### set gisfilter(sat_bundle,sat_conus_netcdf,wctrc_name) "wct_sat_conus.xml";
### set gisfilter(sat_bundle,sat_conus_netcdf,regex) {_tig(e|w)};
### set gisfilter(sat_bundle,sat_conus_netcdf,wctrc_file) "";
#
# which should be specified instead by using the bundle functions defined
# below.
##############################################################################
#
set gisfilter(sat_bundlelist) [list];

#
# rad configuration
#
set gisfilter(rad_enable) 0;
set gisfilter(rad_regex)  {.*};  # matches against fname
set gisfilter(rad_latest_enable)        1; # make link to latest
set gisfilter(rad_latestname)   "latest";
set gisfilter(rad_namefmt)      {$rc(awips)_$rc(ymd_hm)}; # without ext
set gisfilter(rad_subdirfmt)    {$rc(awips2)/$rc(awips1)}; 
#
set gisfilter(rad_outputfile_namefmt,nids) "$gisfilter(rad_namefmt).nids";
set gisfilter(rad_outputfile_dirfmt,nids) "rad/nids/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,tif) "$gisfilter(rad_namefmt).tif";
set gisfilter(rad_outputfile_dirfmt,tif) "rad/tif/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_outputfile_namefmt,netcdf) "$gisfilter(rad_namefmt).nc";
set gisfilter(rad_outputfile_dirfmt,netcdf) \
	"rad/netcdf/$gisfilter(rad_subdirfmt)";
#
set gisfilter(rad_bundlelist) [list];

#
# rad2
#
set gisfilter(rad2_enable) 0;
set gisfilter(rad2_regex)  {.*};  # matches against fname
set gisfilter(rad2_latest_enable)        1; # make link to latest
set gisfilter(rad2_latestname)   "latest";
set gisfilter(rad2_namefmt)      {$rc(STATION)_${ymd_hm}};
set gisfilter(rad2_subdirfmt)    {$rc(STATION)};
set gisfilter(rad2_outputfile_namefmt,nids) $gisfilter(rad2_namefmt);
set gisfilter(rad2_outputfile_dirfmt,nids) \
	"rad2/nids/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,tif) "$gisfilter(rad2_namefmt).tif";
set gisfilter(rad2_outputfile_dirfmt,tif) \
	"rad2/tif/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_outputfile_namefmt,netcdf) "$gisfilter(rad2_namefmt).nc";
set gisfilter(rad2_outputfile_dirfmt,netcdf) \
	"rad2/netcdf/$gisfilter(rad2_subdirfmt)";
#
set gisfilter(rad2_bundlelist) [list];

# The local overrides
if {[file exists $gisfilter(conf)]} {
    source $gisfilter(conf);
}

#
# Bundle configuration functions
#
proc _wct_bundle_add {type wctfmt wctrc_name regex {wctrc_file ""}} {

    global gisfilter;
    
    append bundle_type $type "_bundle";

    # Construct a unique tag
    append bundle_name $wctfmt "." $wctrc_name;

    lappend gisfilter(sat_bundlelist) $bundle_name;
    set gisfilter($bundle_type,$bundle_name,outputfile_fmt) $wctfmt;
    set gisfilter($bundle_type,$bundle_name,wctrc_name) $wctrc_name;
    set gisfilter($bundle_type,$bundle_name,regex) $regex;
    set gisfilter($bundle_type,$bundle_name,wctrc_file) $wctrc_file;
}

proc _wct_bundle_clear {type} {

    global gisfilter;
    
    append bundlelist $type "_bundlelist";

    set gisfilter($bundlelist) [list];
}
	

proc sat_bundle_add {wct_fmt wctrcr_name regex {wctrc_file ""}} {

    _wct_bundle_add "sat" $wct_fmt $wctrcr_name $regex $wctrc_file;
}

proc sat_bundle_clear {} {

    _wct_bundle_clear "sat";
}

#
# Examples
#
### sat_bundle_add "tif" "wct_sat_conus.xml" {_tig(e|w)};
### sat_bundle_add "nc" "wct_sat_conus.xml" {_tig(e|w)};

#
# Dynamic initialization
#

# Read the bundle configurations
if {[file exists $gisfilter(bundle_conf)]} {
    source $gisfilter(bundle_conf);
}
#
if {[llength $gisfilter(sat_bundlelist)] == 0} {
    log_msg "No bundles configured.";
    return 1;
}

# Get the full paths of the wct rc files
foreach bundle $gisfilter(sat_bundlelist) {
    set rcfile $gisfilter(sat_bundle,$bundle,wctrc_file);
    if {$rcfile ne ""} {
	if {[file exists $rcfile] == 0} {
	    log_msg "$rcfile not found.";
	    return 1;
	}
	continue;
    }

    set rcname $gisfilter(sat_bundle,$bundle,wctrc_name);
    set rcfile [filterlib_find_conf $rcname \
	$gisfilter(wct_rcdirs) $gisfilter(wct_rcsubdir)];

    if {$rcfile eq ""} {
	log_msg "$rcname not found.";
	return 1;
    }

    set gisfilter(sat_bundle,$bundle,wctrc_file) $rcfile;
}
