#!/usr/bin/perl
#
# $Id$
#
# Sample script for storing files in a gempak-like directory tree. 
# This file can be placed in the nbsp dev directory, and then a HUP
# signal to nbspd (if it already running) to load it. 

use File::Basename;
use File::Path;
use Compress::Zlib;
use Sys::Syslog;
use Getopt::Std;
use strict;

# The file filter needs only $gdatadir; the others are used by the pipe
# filters.
our $gempak_homedir = "/home/gempak";
our $gdec_bindir = "/home/gempak/bin";

# the directory that contains "data/gempak" (i.e., in ldm it is /home/ldm)
our $gdec_rootdir = "/var/noaaport";
our $gdec_logdir = "/var/noaaport/logs";

our $gverbose = 0;
our $glogfile = "";

# globals set in main
our $gdec_GEMTBL;
our $gdec_GEMPAK;
our $gdatadir;

our $gmpk_header_fmt = "\001\r\r\n%03d \r\r\n"; 
our $gmpk_trailer_str = "\r\r\n\003"; 

sub parseopts() {

    my %opts;
    my $options = "h:b:r:l:vf:";

    if(getopts($options, \%opts) == undef){
	syslog("err", "Error parsing options. $!");
	exit;
    }

    if($opts{h} ne undef){
	$gempak_homedir = $opts{h};
    }

    if($opts{b} ne undef){
	$gdec_bindir = $opts{b};
    }

    if($opts{r} ne undef){
	$gdec_rootdir = $opts{r};
    }
       
    if($opts{l} ne undef){
	$gdec_logdir = $opts{l};
    }

    if($opts{v} ne undef){
	$gverbose = $opts{v};
    }

    if($opts{f} ne undef){
	$glogfile = $opts{f};
    }

    $gdec_GEMTBL = "$gempak_homedir/gempak/tables";
    $gdec_GEMPAK = "$gempak_homedir/gempak";
    $gdatadir = "$gdec_rootdir/data/gempak";
}

sub main() {

    my $line;
    my ($seq, $type, $cat, $code, $fpath);
    my ($fname, $dirname);

    openlog "gempak-filter", "ndelay", "nowait", "user"; 

    parseopts();
    $gdec_GEMTBL = "$gempak_homedir/gempak/tables";
    $gdec_GEMPAK = "$gempak_homedir/gempak";
    $gdatadir = "$gdec_rootdir/data/gempak";
    
    chdir($gdec_rootdir);

    if($glogfile ne ""){
	if(open(STDOUT, ">$glogfile") == undef){
	    syslog("err", "Could not open $glogfile. $!");
	    $glogfile = "";
	}
    }

    while($line = <STDIN>){

	if($glogfile ne ""){
	    print $line;
	}

	chop($line);

	if($line eq ""){
	    syslog("info", "Received request to quit.");
	    last;
	}

	($seq, $type, $cat, $code, $fpath) = split(/\s+/, $line);

	$dirname = dirname($fpath);
	$fname = basename($fpath);

	process_product($seq, $fpath, $fname);
    }

    if($glogfile ne ""){
	close(STDOUT);
    }

    closelog;
}

sub process_product(){

    my ($seq, $fpath, $fname) = @_;
    my ($station, $wmoid, $awips, $notawips);
    my ($awips1, $awips2);
    my @time;
    my $ymdh;
    my $ymd_hm;
    my $pipe_cmd;
    my $pipe_options;
    my $exec_cmd;
    my $cmd_options;
    my $savedir;
    my $savename;		# only the file filter uses it
    my $f_append = 1;		# only the file filter uses it
    my $f_compress = 0;

    # The file name is of the form "tjsj_sdus52-ncrjua" 
    # when there is an awips code, or "kwbc_ytqm52+grib".
    # In some cases, the third component is absent as well.

    if($fname =~ /-/){
	$notawips = "";
	($station, $wmoid, $awips) = split(/[_\-]/, $fname);
	$awips1 = substr($awips, 0, 3);
	$awips2 = substr($awips, 3);
    }elsif($fname =~ /\+/){
	$awips = "";
	$awips1 = "";
	$awips2 = "";
	($station, $wmoid, $notawips) = split(/[_+]/, $fname);
    }else{
	$awips = "";
	$awips1 = "";
	$awips2 = "";
	$notawips = "";
	($station, $wmoid) = split(/[_]/, $fname);
    }

    @time = gmtime();
    $time[5] += 1900;
    $time[4] += 1;
    $ymdh = sprintf("%d%02d%02d%02d", $time[5], $time[4], $time[3], $time[2]); 
    $ymd_hm = sprintf("%d%02d%02d_%02d%02d", 
		      $time[5], $time[4], $time[3], $time[2], $time[1]); 

    @gp.pl@;
}

sub filter_pipe(){

    my($seq, $fpath, $fname,
       $pipe_cmd, $pipe_options, $savename, $f_compress) = @_;
    my $status;
    my $line1;
    my $line2;
    my $subline1;
    my @body;
    my $body;
    my $cbody;
    my $framenumber;
    my $size;

    if($savename ne ""){
	$savename = "$gdatadir/$savename";
    }

    if(open(FIN, $fpath)  == undef){
	syslog("err", "Could not open $fpath: $!");
	return;    
    }

    $status = open(FOUT, "|$pipe_cmd $pipe_options $savename");

    if($status == undef){
	close(FIN);
	syslog("err", "Could not open $pipe_cmd: $!");
	return;
    }

    printf(FOUT $gmpk_header_fmt, $seq % 1000);
    if($f_compress == 1){
	if($gverbose == 1){
	    syslog("info", "Compressing $fpath.");
	}

	# For gempak compatibility, the entire product must be split
	# in 4000 bytes frames (as in the raw noaaport), then compress
	# each frame individually, and then catenate the compressed
	# frames. That is prepended with the wmo and awips header 
	# (from the the first and second lines of the original uncompressed
	# file). Furthermore, the frames must be compressed with level 9
	# and with the compress() function, not with ->deflate.

	# The first line (ccb) contains binary characters and may have
	# a '\n', so do not use <FIN> to read that entire line.

	read(FIN, $line1, 24);		# points past the 24 byte ccb header
	$subline1 = <FIN>;		# rest of line1 (wmo)
	$size = 24 + length($subline1);
	$line1 = "$line1$subline1";	# full line1
	print(FOUT $subline1);
	$line2 = <FIN>;
	$size += length($line2);
	print(FOUT $line2);
	$framenumber = 0;
	while(read(FIN, $body, 4000 - $size) > 0){
	    if($framenumber == 0){
		++$framenumber;
		$size = 0;	# read full 4000 bytes for other frames
		$body = join("", $line1, $line2, $body);
	    }
	    $cbody = compress($body, 9);
	    print(FOUT $cbody);
	}
    }else{
	read(FIN, $line1, 24);		# points past the 24 byte ccb header
	$subline1 = <FIN>;		# rest of line1 (wmo)
	@body = <FIN>;
	print(FOUT $subline1);
	print(FOUT @body);
    }
    printf(FOUT $gmpk_trailer_str);

    close(FIN);
    close(FOUT);

    if($gverbose == 1){
	syslog("info", "Piping $fname to $pipe_cmd.");
    }
}

sub filter_file(){

    my($seq, $fpath, $fname, $savedir, $savename, $f_compress, $f_append) = @_;
    my $line1;
    my $line2;
    my $subline1;
    my @body;
    my $body;
    my $cbody;
    my $framenumber;
    my $size;
    my $status;

    $savedir = "$gdatadir/$savedir";

    if(-e $savedir && !-d $savedir){
	syslog("err", "Exists and not dir.");
	return;
    }elsif(!-e $savedir){
	if(mkpath($savedir, 0, 0755) == 0){
	    syslog("err", "Cannot make $savedir: $!");
	    return;
	}
    }

    if(open(FIN, $fpath)  == undef){
	syslog("err", "Could not open $fpath: $!");
	return;    
    }else{
	if($f_append == 1){
	    $status = open(FOUT, ">>$savedir/$savename");
	}else{
	    $status = open(FOUT, ">$savedir/$savename");
	}
	if($status == undef){
	    close(FIN);
	    syslog("err", "Could not open $savedir/$savename: $!");
	    return;
	}
    }

    printf(FOUT $gmpk_header_fmt, $seq % 1000);
    if($f_compress == 1){
	if($gverbose == 1){
	    syslog("info", "Compressing $savename.");
	}

	# For gempak compatibility, the entire product must be split
	# in 4000 bytes frames (as in the raw noaaport), then compress
	# each frame individually, and then catenate the compressed
	# frames. That is prepended with the wmo and awips header 
	# (from the the first and second lines of the original uncompressed
	# file). Furthermore, the frames must be compressed with level 9
	# and with the compress() function, not with ->deflate.

	# The first line (ccb) contains binary characters and may have
	# a '\n', so do not use <FIN> to read that entire line.

	read(FIN, $line1, 24);		# points past the 24 byte ccb header
	$subline1 = <FIN>;		# rest of line1 (wmo)
	$size = 24 + length($subline1);
	$line1 = "$line1$subline1";	# full line1
	print(FOUT $subline1);
	$line2 = <FIN>;
	$size += length($line2);
	print(FOUT $line2);
	$framenumber = 0;
	while(read(FIN, $body, 4000 - $size) > 0){
	    if($framenumber == 0){
		++$framenumber;
		$size = 0;	# read full 4000 bytes for other frames
		$body = join("", $line1, $line2, $body);
	    }
	    $cbody = compress($body, 9);
	    print(FOUT $cbody);
	}
    }else{
	read(FIN, $line1, 24);		# points past the 24 byte ccb header
	$subline1 = <FIN>;		# rest of line1 (wmo)
	@body = <FIN>;
	print(FOUT $subline1);
	print(FOUT @body);
    }
    printf(FOUT $gmpk_trailer_str);

    close(FIN);
    close(FOUT);

    if($gverbose == 1){
	syslog("info", "Archiving $fname in $savedir/$savename.");
    }
}

sub filter_exec(){

    my($seq, $fpath, $fname, $exec_cmd, $cmd_options) = @_;
    my $cmdargs;

    if($gverbose == 1){
	syslog("info", "Processing $fname.");
    }

    $cmdargs = "$cmd_options $fpath";
    system($exec_cmd, $cmdargs);
}

main();

