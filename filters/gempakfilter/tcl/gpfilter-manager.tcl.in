#!%TCLSH%
#
# $Id$
#

## The common defaults
set filters_init_file "/usr/local/libexec/nbsp/filters.init";
if {[file exists $filters_init_file] == 0} {
	puts "gpfilter-master disabled: $filters_init_file not found.";
	return 1;
}
source $filters_init_file;
unset filters_init_file;

if {$filters_init_status == 1} {
	return 1;
}
unset filters_init_status;

## Initialization of this filter.
set initfile [file join $common(libdir) "gpfilter.init"];
if {[file exists $initfile] == 0} {
        puts "dafilter disabled: $initfile not found.";
        return 1;
}
source $initfile;

#
## variables of this filter
#
#
## variables of this filter
#
# gpfilter(slave,<type>,open) 0;
# gpfilter(slave,<type>,enable) 1;
# gpfilter(slave,<type>,F) (dynamically initialized before entering main)
#
foreach type $gpfilter(slave,types) { 
    set gpfilter(slave,$type,open) 0;
    set gpfilter(slave,$type,enable) 1;
}
set gpfilter(manager) 1;

proc main {argc argv} {

    global gpfilter;
    global errorInfo;

    cd $gpfilter(dec_datadir);

    # gets returns -1 on eof. In addition the server explicitly
    # signals the filters to quit by sending a blankline
    # (gets returns 0 in this case, and finfo is "").

    while {[gets stdin finfo] >= 0} {
	if {$finfo == ""} {
	    log_msg "Received request to quit.";
	    break;
	}

	set status [catch {process $finfo} errmsg];
	if {$status == 1} {
	    log_msg "Error processing $finfo";
	    log_msg $errmsg;
	    log_msg $errorInfo;
	}

	# If there was a write error, the functions close the connections.
	# We check and try to reopen it.

	foreach type $gpfilter(slave,types) {
	    if {($gpfilter(slave,$type,enable) == 1) && \
		($gpfilter(slave,$type,open) == 0)} {
	        gpfilter_slave_open $type;
	    }
	}
    }

    foreach type $gpfilter(slave,types) {
	gpfilter_slave_close $type;
    }
}

proc process {finfo} {

    global gpfilter;

    filterlib_get_rcvars rc $finfo -nobody;

    foreach type $gpfilter(slave,types) {
	if {[filterlib_uwildmat $gpfilter(slave,$type,ure) $rc(fname)] && \
	    ($gpfilter(slave,$type,enable) == 1)} {
	    gpfilter_slave_write $type $finfo;
	    break;
	}
    }
}

#
# The gpfilter_slave functions
#

proc gpfilter_slave_open {type} {

    global gpfilter;

    set status [catch {
	set gpfilter(slave,$type,F) [open "|$gpfilter(slave)" w];
	fconfigure $gpfilter(slave,$type,F) -buffering line;
    } errmsg];

    if {$status == 0} {
	set gpfilter(slave,$type,open) 1;
    } else {
	log_msg $errmsg
    }
}

proc gpfilter_slave_close {type} {

    global gpfilter;

    if {$gpfilter(slave,$type,open) == 0} {
	return;
    }

    set status [catch {close $gpfilter(slave,$type,F)} errmsg];
    set gpfilter(slave,$type,open) 0;
    if {$status != 0} {
	log_msg $errmsg;
    }
}

proc gpfilter_slave_write {type msg} {

    global gpfilter;
    global errorInfo;

    if {$gpfilter(slave,$type,open) == 0} {
	log_msg "Connection to slave $type is closed.";
	return;
    }

    set status [catch {puts $gpfilter(slave,$type,F) $msg} errmsg];
    if {$status == 0} {
	return;
    }

    # If there as a write error, close the connection and retry.
    gpfilter_slave_close $type;
    gpfilter_slave_open $type;
    if {$gpfilter(slave,$type,open) == 0} {
	log_msg $errmsg;
	return;
    }

    set status [catch {puts $gpfilter(slave,$type,F) $msg} errmsg];
    if {$status != 0} {
	log_msg $errmsg;
	log_msg $errorInfo;
	return;
    }
}

#
# Dynamic initialization
#
# Open the pipes. In case a connection cannot be establish, log an error
# and continue but disable that type.
foreach type $gpfilter(slave,types) { 
    gpfilter_slave_open $type;
    if {$gpfilter(slave,$type,open) == 0} {
	log_msg "Disabling the $type dispatching.";
	set gpfilter(slave,type,enable) 0;
    }
}

main $argc $argv;
